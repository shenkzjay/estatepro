generator client {
  provider = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String           @unique
  password             String?
  image                String?
  role                 Role?            @default(RESIDENT)
  Magiclink            Magiclink[]      @relation("MagiclinkToUser")
  residentData         Resident?        @relation("UserToResident")
  staffData            Staff?           @relation("UserToStaff")
  createdBy            User?            @relation("CreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdById          String?          @db.ObjectId
  createdUsers         User[]          @relation("CreatedBy")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model Resident {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  housenumber   String?
  streetaddress String?
  housetype     String?
  moveindate    DateTime?
  phonenumber   String?
  payment       PaymentData[]   @relation("ResidentToPayment")
  visitorcode   VisitorCode[]    @relation("ResidentToVisitorcode")
  vehicle       Vehicle[]       @relation("ResidentToVehicle")
  user          User            @relation("UserToResident", fields: [userId], references: [id], onDelete:Cascade)
  userId        String          @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Magiclink{
    id            String           @id @default(auto()) @map("_id") @db.ObjectId
    token         String?          @unique
    expiresAt     DateTime?
    user          User             @relation("MagiclinkToUser", fields:[userId], references:[id], onDelete:Cascade)
    userId        String           @db.ObjectId

}

model Vehicle {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  resident      Resident         @relation("ResidentToVehicle", fields:[residentId], references:[id], onDelete:Cascade)
  residentId    String           @db.ObjectId
  vehiclenumber String?
  vehiclemake   String?
  vehiclemodel  String?
  vehiclecolor  String?
}


model PaymentData {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    resident      Resident      @relation("ResidentToPayment", fields:[residentId], references:[id], onDelete:Cascade)
    residentId    String         @db.ObjectId
    paymenttype   String?
    duedate       DateTime?
    paymentamount Int
    createdAt     DateTime @default(now())
    paymentstatus PaymentStatus?  @default(PENDING)

}



model VisitorCode {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    visitorname   String   
    visitornumber String
    visitoremail  String?
    code          String
    Dateofvisit   DateTime
    resident      Resident      @relation("ResidentToVisitorcode", fields:[residentId], references:[id], onDelete:Cascade)
    residentId    String         @db.ObjectId
    createdAt     DateTime @default(now())
    expiresAt     DateTime
    status        VisitorCodeStatus? @default(ACTIVE)
}


model Staff {
    id            String           @id @default(auto()) @map("_id") @db.ObjectId
    user          User             @relation("UserToStaff",fields: [userId], references: [id], onDelete: Cascade)
    userId        String           @unique @db.ObjectId
    position      String?
    phonenumber   String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

enum Role {
  SUPERADMIN
  ADMIN
  RESIDENT
  STAFF
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
}

enum VisitorCodeStatus {
  ACTIVE
  EXPIRED
  REVOKED
}
